// const assert = require('assert'); // Sintaxe para incluir o m√≥dulo assert

// assert.strictEqual(50, 50); // Sem erros: 50 == 50

// Codigos corretos o assert nao aponta nada.

//assert.strictEqual(50, 70); // AssertionError: 50 == 70 

// codigos com erro ele retorna o erro no console

//----------------------------------------------------------------//

const assert = require('assert');

function division(x, y) {
  return x / y;
}

const expected = division(9, 3);

assert.equal(expected, 3, 'Nove dividido por tr√™s √© igual a tr√™s');

// Os dois c√≥digos acima utilizam o m√©todo assert.strictEqual . Esse m√©todo compara o primeiro e o segundo par√¢metro utilizando o operador === . Se os valores ou os tipos forem diferentes, o teste falhar√° e ser√° mostrado um erro com a mensagem que est√° no terceiro par√¢metro, se houver (o terceiro par√¢metro √© opcional). N√£o deixe de provocar uma falha no teste para ver o resultado! Este m√©todo tem o mesmo resultado que a express√£o assert(expected === 3, 'Nove dividido por tr√™s √© igual a tr√™s') .

//-------------------------------------------------------------------//


const assert = require('assert');

function add(a, b) {
  return a + b;
}

const expected = add(1, 2);

 assert.ok(expected === 3, 'Um mais dois √© igual a tr√™s'); // Checa se o primeiro argumento √© verdadeiro

 assert.strictEqual(expected, 3, 'Um mais dois √© igual a tr√™s'); // Checa se o primeiro e segundo argumentos s√£o iguais em valor e tipo (===)

 assert.notStrictEqual(expected, 4, 'Um mais dois √© igual a tr√™s (e n√£o quatro!)'); // Checa se o primeiro e segundo argumentos s√£o diferentes (!==)
 

// √â poss√≠vel tamb√©m testar estruturas como arrays e objetos:

const assert = require('assert');

const list1 = [1, 2, 3, 4, 5];
const list2 = [1, 2, 3, 4, 5];

 //assert.deepStrictEqual(list1, list2 , 'Erro: list1 e list2 n√£o s√£o estritamente iguais');

const person1 = { name: 'john', age: 21 };
const person2 = { name: 'john', age: 21 };

 assert.deepStrictEqual(person1, person2, 'Erro: person1 e person2 n√£o s√£o estritamente iguais');

const person3 = { name: 'john', age: 19 };

 assert.notDeepStrictEqual(person1, person3, 'Erro: os valores dos objetos s√£o estritamente iguais');






 function division(x, y) {
    return x / y;

  }

const assert = require('assert');

// declara√ß√£o da fun√ß√£o division, definida anteriormente...

assert.strictEqual(division(10, 2), 5); // OK

assert.strictEqual(division(10, 0), 0); // üí£


const assert = require('assert');

function division(x, y) {
  if (y === 0) throw new Error('parameter y must not be 0');
  return x / y;
}

//assert.strictEqual(division(10, 2), 5); // OK

assert.throws(() => { division(10, 0); }, /^Error: parameter y must not be 0$/); // OK



function division(x, y) {
  // Queremos que o c√≥digo retorne um erro com uma mensagem espec√≠fica
  // caso o par√¢metro y seja 0. Por isso lan√ßamos uma exce√ß√£o se essa condi√ß√£o
  // for verdadeira, o que ir√° interromper a execu√ß√£o da fun√ß√£o.

  if (y === 0) throw new Error('parameter y must not be 0');
  return x / y;
}

function myFunction(){}

const assert = require('assert');
assert.strictEqual(typeof myFunction, 'function');